// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var __std = __std || {};

/**
 * @enum
 */
__std.Args = {
  NONE: 0,
  WriteArgs: 1,
  ReadArgs: 2,
  CancelArgs: 3
};

/**
 * @constructor
 */
__std.Message = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.Message}
 */
__std.Message.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.Message=} obj
 * @returns {__std.Message}
 */
__std.Message.getRootAsMessage = function(bb, obj) {
  return (obj || new __std.Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {__std.Args}
 */
__std.Message.prototype.argsType = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {__std.Args} */ (this.bb.readUint8(this.bb_pos + offset)) : __std.Args.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
__std.Message.prototype.args = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.Message.startMessage = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {__std.Args} argsType
 */
__std.Message.addArgsType = function(builder, argsType) {
  builder.addFieldInt8(0, argsType, __std.Args.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} argsOffset
 */
__std.Message.addArgs = function(builder, argsOffset) {
  builder.addFieldOffset(1, argsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.Message.endMessage = function(builder) {
  var offset = builder.endObject();
  return offset;
};

// Exports for ECMAScript6 Modules
export {__std};
