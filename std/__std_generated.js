// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var __std = __std || {};

/**
 * @enum
 */
__std.DeferredRetval = {
  NONE: 0,
  Deferred: 1,
  Error: 2
};

/**
 * @enum
 */
__std.FulfilmentValue = {
  NONE: 0,
  Data: 1,
  EndOfStream: 2,
  Error: 3
};

/**
 * @enum
 */
__std.FileSystemRetval = {
  NONE: 0,
  FileInfo: 1,
  Directory: 2,
  Error: 3
};

/**
 * @enum
 */
__std.Format = {
  Auto: 0,
  JSON: 1,
  YAML: 2,
  Raw: 3
};

/**
 * Encoding specifies the requested form of the contents to read;
 * either just the raw bytes, or as a UTF-16 string. Distinguishing
 * String (a UTF16-encoded string) is desirable because JavaScript
 * natively supports UTF-16, so if you want to be able
 * to decode a string value conveniently, it is best to ship it as
 * UTF-16. Similarly, JSON is there as a means of sending structured
 * data, e.g., YAML, in a way that JavaScript can digest easily.
 *
 * @enum
 */
__std.Encoding = {
  Bytes: 0,
  String: 1,
  JSON: 2
};

/**
 * @enum
 */
__std.Args = {
  NONE: 0,
  WriteArgs: 1,
  ReadArgs: 2,
  CancelArgs: 3,
  FileInfoArgs: 4,
  ListArgs: 5
};

/**
 * Error encodes an error either in accepting a request, or in fulfilling it (in deferreds).
 *
 * @constructor
 */
__std.Error = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.Error}
 */
__std.Error.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.Error=} obj
 * @returns {__std.Error}
 */
__std.Error.getRootAsError = function(bb, obj) {
  return (obj || new __std.Error).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
__std.Error.prototype.message = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.Error.startError = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} messageOffset
 */
__std.Error.addMessage = function(builder, messageOffset) {
  builder.addFieldOffset(0, messageOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.Error.endError = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * CancelArgs encodes a message cancelling a deferred response.
 *
 * @constructor
 */
__std.CancelArgs = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.CancelArgs}
 */
__std.CancelArgs.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.CancelArgs=} obj
 * @returns {__std.CancelArgs}
 */
__std.CancelArgs.getRootAsCancelArgs = function(bb, obj) {
  return (obj || new __std.CancelArgs).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {flatbuffers.Long}
 */
__std.CancelArgs.prototype.serial = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.CancelArgs.startCancelArgs = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} serial
 */
__std.CancelArgs.addSerial = function(builder, serial) {
  builder.addFieldInt64(0, serial, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.CancelArgs.endCancelArgs = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Deferred encodes a serial number, standing in for an result or results to be fulfilled later.
 *
 * @constructor
 */
__std.Deferred = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.Deferred}
 */
__std.Deferred.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.Deferred=} obj
 * @returns {__std.Deferred}
 */
__std.Deferred.getRootAsDeferred = function(bb, obj) {
  return (obj || new __std.Deferred).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {flatbuffers.Long}
 */
__std.Deferred.prototype.serial = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.Deferred.startDeferred = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} serial
 */
__std.Deferred.addSerial = function(builder, serial) {
  builder.addFieldInt64(0, serial, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.Deferred.endDeferred = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Response encodes the _synchronous_ response to a message expecting a deferred value or values.
 *
 * @constructor
 */
__std.DeferredResponse = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.DeferredResponse}
 */
__std.DeferredResponse.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.DeferredResponse=} obj
 * @returns {__std.DeferredResponse}
 */
__std.DeferredResponse.getRootAsDeferredResponse = function(bb, obj) {
  return (obj || new __std.DeferredResponse).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {__std.DeferredRetval}
 */
__std.DeferredResponse.prototype.retvalType = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {__std.DeferredRetval} */ (this.bb.readUint8(this.bb_pos + offset)) : __std.DeferredRetval.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
__std.DeferredResponse.prototype.retval = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.DeferredResponse.startDeferredResponse = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {__std.DeferredRetval} retvalType
 */
__std.DeferredResponse.addRetvalType = function(builder, retvalType) {
  builder.addFieldInt8(0, retvalType, __std.DeferredRetval.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} retvalOffset
 */
__std.DeferredResponse.addRetval = function(builder, retvalOffset) {
  builder.addFieldOffset(1, retvalOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.DeferredResponse.endDeferredResponse = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Data is data sent as (possibly partial) fulfilment of a deferred result.
 *
 * @constructor
 */
__std.Data = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.Data}
 */
__std.Data.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.Data=} obj
 * @returns {__std.Data}
 */
__std.Data.getRootAsData = function(bb, obj) {
  return (obj || new __std.Data).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @returns {number}
 */
__std.Data.prototype.bytes = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
};

/**
 * @returns {number}
 */
__std.Data.prototype.bytesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Uint8Array}
 */
__std.Data.prototype.bytesArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.Data.startData = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} bytesOffset
 */
__std.Data.addBytes = function(builder, bytesOffset) {
  builder.addFieldOffset(0, bytesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
__std.Data.createBytesVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
__std.Data.startBytesVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.Data.endData = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * EndOfStream signals that there will be no more data.
 *
 * @constructor
 */
__std.EndOfStream = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.EndOfStream}
 */
__std.EndOfStream.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.EndOfStream=} obj
 * @returns {__std.EndOfStream}
 */
__std.EndOfStream.getRootAsEndOfStream = function(bb, obj) {
  return (obj || new __std.EndOfStream).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.EndOfStream.startEndOfStream = function(builder) {
  builder.startObject(0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.EndOfStream.endEndOfStream = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Resolution represents the _asynchronous_ fulfilment of a deferred value (possibly one of many values).
 *
 * @constructor
 */
__std.Fulfilment = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.Fulfilment}
 */
__std.Fulfilment.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.Fulfilment=} obj
 * @returns {__std.Fulfilment}
 */
__std.Fulfilment.getRootAsFulfilment = function(bb, obj) {
  return (obj || new __std.Fulfilment).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {flatbuffers.Long}
 */
__std.Fulfilment.prototype.serial = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @returns {__std.FulfilmentValue}
 */
__std.Fulfilment.prototype.valueType = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? /** @type {__std.FulfilmentValue} */ (this.bb.readUint8(this.bb_pos + offset)) : __std.FulfilmentValue.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
__std.Fulfilment.prototype.value = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.Fulfilment.startFulfilment = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} serial
 */
__std.Fulfilment.addSerial = function(builder, serial) {
  builder.addFieldInt64(0, serial, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {__std.FulfilmentValue} valueType
 */
__std.Fulfilment.addValueType = function(builder, valueType) {
  builder.addFieldInt8(1, valueType, __std.FulfilmentValue.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueOffset
 */
__std.Fulfilment.addValue = function(builder, valueOffset) {
  builder.addFieldOffset(2, valueOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.Fulfilment.endFulfilment = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
__std.FileInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.FileInfo}
 */
__std.FileInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.FileInfo=} obj
 * @returns {__std.FileInfo}
 */
__std.FileInfo.getRootAsFileInfo = function(bb, obj) {
  return (obj || new __std.FileInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
__std.FileInfo.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
__std.FileInfo.prototype.path = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {boolean}
 */
__std.FileInfo.prototype.isdir = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.FileInfo.startFileInfo = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
__std.FileInfo.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} pathOffset
 */
__std.FileInfo.addPath = function(builder, pathOffset) {
  builder.addFieldOffset(1, pathOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isdir
 */
__std.FileInfo.addIsdir = function(builder, isdir) {
  builder.addFieldInt8(2, +isdir, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.FileInfo.endFileInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
__std.Directory = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.Directory}
 */
__std.Directory.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.Directory=} obj
 * @returns {__std.Directory}
 */
__std.Directory.getRootAsDirectory = function(bb, obj) {
  return (obj || new __std.Directory).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
__std.Directory.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
__std.Directory.prototype.path = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @param {__std.FileInfo=} obj
 * @returns {__std.FileInfo}
 */
__std.Directory.prototype.files = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new __std.FileInfo).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
__std.Directory.prototype.filesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.Directory.startDirectory = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
__std.Directory.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} pathOffset
 */
__std.Directory.addPath = function(builder, pathOffset) {
  builder.addFieldOffset(1, pathOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} filesOffset
 */
__std.Directory.addFiles = function(builder, filesOffset) {
  builder.addFieldOffset(2, filesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
__std.Directory.createFilesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
__std.Directory.startFilesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.Directory.endDirectory = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
__std.FileInfoArgs = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.FileInfoArgs}
 */
__std.FileInfoArgs.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.FileInfoArgs=} obj
 * @returns {__std.FileInfoArgs}
 */
__std.FileInfoArgs.getRootAsFileInfoArgs = function(bb, obj) {
  return (obj || new __std.FileInfoArgs).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
__std.FileInfoArgs.prototype.path = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.FileInfoArgs.startFileInfoArgs = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} pathOffset
 */
__std.FileInfoArgs.addPath = function(builder, pathOffset) {
  builder.addFieldOffset(0, pathOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.FileInfoArgs.endFileInfoArgs = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
__std.ListArgs = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.ListArgs}
 */
__std.ListArgs.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.ListArgs=} obj
 * @returns {__std.ListArgs}
 */
__std.ListArgs.getRootAsListArgs = function(bb, obj) {
  return (obj || new __std.ListArgs).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
__std.ListArgs.prototype.path = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.ListArgs.startListArgs = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} pathOffset
 */
__std.ListArgs.addPath = function(builder, pathOffset) {
  builder.addFieldOffset(0, pathOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.ListArgs.endListArgs = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
__std.FileSystemResponse = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.FileSystemResponse}
 */
__std.FileSystemResponse.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.FileSystemResponse=} obj
 * @returns {__std.FileSystemResponse}
 */
__std.FileSystemResponse.getRootAsFileSystemResponse = function(bb, obj) {
  return (obj || new __std.FileSystemResponse).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {__std.FileSystemRetval}
 */
__std.FileSystemResponse.prototype.retvalType = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {__std.FileSystemRetval} */ (this.bb.readUint8(this.bb_pos + offset)) : __std.FileSystemRetval.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
__std.FileSystemResponse.prototype.retval = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.FileSystemResponse.startFileSystemResponse = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {__std.FileSystemRetval} retvalType
 */
__std.FileSystemResponse.addRetvalType = function(builder, retvalType) {
  builder.addFieldInt8(0, retvalType, __std.FileSystemRetval.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} retvalOffset
 */
__std.FileSystemResponse.addRetval = function(builder, retvalOffset) {
  builder.addFieldOffset(1, retvalOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.FileSystemResponse.endFileSystemResponse = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
__std.WriteArgs = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.WriteArgs}
 */
__std.WriteArgs.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.WriteArgs=} obj
 * @returns {__std.WriteArgs}
 */
__std.WriteArgs.getRootAsWriteArgs = function(bb, obj) {
  return (obj || new __std.WriteArgs).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
__std.WriteArgs.prototype.path = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
__std.WriteArgs.prototype.value = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {__std.Format}
 */
__std.WriteArgs.prototype.format = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? /** @type {__std.Format} */ (this.bb.readInt8(this.bb_pos + offset)) : __std.Format.Auto;
};

/**
 * @returns {number}
 */
__std.WriteArgs.prototype.indent = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.WriteArgs.startWriteArgs = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} pathOffset
 */
__std.WriteArgs.addPath = function(builder, pathOffset) {
  builder.addFieldOffset(0, pathOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueOffset
 */
__std.WriteArgs.addValue = function(builder, valueOffset) {
  builder.addFieldOffset(1, valueOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {__std.Format} format
 */
__std.WriteArgs.addFormat = function(builder, format) {
  builder.addFieldInt8(2, format, __std.Format.Auto);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} indent
 */
__std.WriteArgs.addIndent = function(builder, indent) {
  builder.addFieldInt8(3, indent, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.WriteArgs.endWriteArgs = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
__std.ReadArgs = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.ReadArgs}
 */
__std.ReadArgs.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.ReadArgs=} obj
 * @returns {__std.ReadArgs}
 */
__std.ReadArgs.getRootAsReadArgs = function(bb, obj) {
  return (obj || new __std.ReadArgs).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
__std.ReadArgs.prototype.url = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
__std.ReadArgs.prototype.timeout = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @returns {__std.Encoding}
 */
__std.ReadArgs.prototype.encoding = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? /** @type {__std.Encoding} */ (this.bb.readInt8(this.bb_pos + offset)) : __std.Encoding.Bytes;
};

/**
 * @returns {__std.Format}
 */
__std.ReadArgs.prototype.format = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? /** @type {__std.Format} */ (this.bb.readInt8(this.bb_pos + offset)) : __std.Format.Auto;
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.ReadArgs.startReadArgs = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} urlOffset
 */
__std.ReadArgs.addUrl = function(builder, urlOffset) {
  builder.addFieldOffset(0, urlOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} timeout
 */
__std.ReadArgs.addTimeout = function(builder, timeout) {
  builder.addFieldInt32(1, timeout, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {__std.Encoding} encoding
 */
__std.ReadArgs.addEncoding = function(builder, encoding) {
  builder.addFieldInt8(2, encoding, __std.Encoding.Bytes);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {__std.Format} format
 */
__std.ReadArgs.addFormat = function(builder, format) {
  builder.addFieldInt8(3, format, __std.Format.Auto);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.ReadArgs.endReadArgs = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
__std.Message = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.Message}
 */
__std.Message.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.Message=} obj
 * @returns {__std.Message}
 */
__std.Message.getRootAsMessage = function(bb, obj) {
  return (obj || new __std.Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {__std.Args}
 */
__std.Message.prototype.argsType = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {__std.Args} */ (this.bb.readUint8(this.bb_pos + offset)) : __std.Args.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
__std.Message.prototype.args = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.Message.startMessage = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {__std.Args} argsType
 */
__std.Message.addArgsType = function(builder, argsType) {
  builder.addFieldInt8(0, argsType, __std.Args.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} argsOffset
 */
__std.Message.addArgs = function(builder, argsOffset) {
  builder.addFieldOffset(1, argsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.Message.endMessage = function(builder) {
  var offset = builder.endObject();
  return offset;
};

// Exports for ECMAScript6 Modules
export {__std};
