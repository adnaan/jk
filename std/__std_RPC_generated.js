// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var __std = __std || {};

/**
 * @enum
 */
__std.Retval = {
  NONE: 0,
  Deferred: 1,
  Error: 2
};

/**
 * @enum
 */
__std.ResolutionValue = {
  NONE: 0,
  Data: 1,
  EndOfStream: 2,
  Error: 3
};

/**
 * CancelArgs encodes a message cancelling a deferred response.
 *
 * @constructor
 */
__std.CancelArgs = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.CancelArgs}
 */
__std.CancelArgs.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.CancelArgs=} obj
 * @returns {__std.CancelArgs}
 */
__std.CancelArgs.getRootAsCancelArgs = function(bb, obj) {
  return (obj || new __std.CancelArgs).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {flatbuffers.Long}
 */
__std.CancelArgs.prototype.serial = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.CancelArgs.startCancelArgs = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} serial
 */
__std.CancelArgs.addSerial = function(builder, serial) {
  builder.addFieldInt64(0, serial, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.CancelArgs.endCancelArgs = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Deferred encodes a ticket standing in for an asynchronous result.
 *
 * @constructor
 */
__std.Deferred = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.Deferred}
 */
__std.Deferred.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.Deferred=} obj
 * @returns {__std.Deferred}
 */
__std.Deferred.getRootAsDeferred = function(bb, obj) {
  return (obj || new __std.Deferred).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {flatbuffers.Long}
 */
__std.Deferred.prototype.serial = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.Deferred.startDeferred = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} serial
 */
__std.Deferred.addSerial = function(builder, serial) {
  builder.addFieldInt64(0, serial, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.Deferred.endDeferred = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Error encodes an error either in processing the request (sync), or in fulfilling it (async).
 *
 * @constructor
 */
__std.Error = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.Error}
 */
__std.Error.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.Error=} obj
 * @returns {__std.Error}
 */
__std.Error.getRootAsError = function(bb, obj) {
  return (obj || new __std.Error).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
__std.Error.prototype.message = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.Error.startError = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} messageOffset
 */
__std.Error.addMessage = function(builder, messageOffset) {
  builder.addFieldOffset(0, messageOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.Error.endError = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Response encodes the _synchronous_ response to a message expecting a deferred value or values.
 *
 * @constructor
 */
__std.Response = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.Response}
 */
__std.Response.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.Response=} obj
 * @returns {__std.Response}
 */
__std.Response.getRootAsResponse = function(bb, obj) {
  return (obj || new __std.Response).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {__std.Retval}
 */
__std.Response.prototype.retvalType = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {__std.Retval} */ (this.bb.readUint8(this.bb_pos + offset)) : __std.Retval.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
__std.Response.prototype.retval = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.Response.startResponse = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {__std.Retval} retvalType
 */
__std.Response.addRetvalType = function(builder, retvalType) {
  builder.addFieldInt8(0, retvalType, __std.Retval.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} retvalOffset
 */
__std.Response.addRetval = function(builder, retvalOffset) {
  builder.addFieldOffset(1, retvalOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.Response.endResponse = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Data is data.
 *
 * @constructor
 */
__std.Data = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.Data}
 */
__std.Data.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.Data=} obj
 * @returns {__std.Data}
 */
__std.Data.getRootAsData = function(bb, obj) {
  return (obj || new __std.Data).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
__std.Data.prototype.bytes = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.Data.startData = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} bytesOffset
 */
__std.Data.addBytes = function(builder, bytesOffset) {
  builder.addFieldOffset(0, bytesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.Data.endData = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * EndOfStream signals that there will be no more values.
 *
 * @constructor
 */
__std.EndOfStream = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.EndOfStream}
 */
__std.EndOfStream.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.EndOfStream=} obj
 * @returns {__std.EndOfStream}
 */
__std.EndOfStream.getRootAsEndOfStream = function(bb, obj) {
  return (obj || new __std.EndOfStream).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.EndOfStream.startEndOfStream = function(builder) {
  builder.startObject(0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.EndOfStream.endEndOfStream = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Resolution represents the _asynchronous_ fulfilment of a deferred value (possibly one of many values).
 *
 * @constructor
 */
__std.Resolution = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.Resolution}
 */
__std.Resolution.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.Resolution=} obj
 * @returns {__std.Resolution}
 */
__std.Resolution.getRootAsResolution = function(bb, obj) {
  return (obj || new __std.Resolution).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {flatbuffers.Long}
 */
__std.Resolution.prototype.serial = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @returns {__std.ResolutionValue}
 */
__std.Resolution.prototype.valueType = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? /** @type {__std.ResolutionValue} */ (this.bb.readUint8(this.bb_pos + offset)) : __std.ResolutionValue.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
__std.Resolution.prototype.value = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.Resolution.startResolution = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} serial
 */
__std.Resolution.addSerial = function(builder, serial) {
  builder.addFieldInt64(0, serial, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {__std.ResolutionValue} valueType
 */
__std.Resolution.addValueType = function(builder, valueType) {
  builder.addFieldInt8(1, valueType, __std.ResolutionValue.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueOffset
 */
__std.Resolution.addValue = function(builder, valueOffset) {
  builder.addFieldOffset(2, valueOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.Resolution.endResolution = function(builder) {
  var offset = builder.endObject();
  return offset;
};

// Exports for ECMAScript6 Modules
export {__std};
