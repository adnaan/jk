// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package lib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 11, 21, 15, 57, 26, 637456488, time.UTC),
		},
		"/std.js": &vfsgen۰CompressedFileInfo{
			name:             "std.js",
			modTime:          time.Date(2018, 11, 27, 18, 36, 53, 960390053, time.UTC),
			uncompressedSize: 13613,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5b\x5d\x6f\xe3\x36\xb3\xbe\x3f\xbf\x42\xc9\x45\x20\x56\xb2\x20\x29\x8e\x37\x6b\x99\x5e\xec\xb6\x49\x9b\x62\x9b\x14\x9b\xb4\x45\x1b\x04\x86\x62\x53\x31\x4f\xb5\x92\x4b\xd2\x9b\x93\xda\x3e\xbf\xfd\x05\x3f\x24\x51\x12\x25\x3b\xc5\xbe\x40\x6f\x36\x2b\x7e\x3c\x33\x1c\xce\x0c\x67\x86\xf4\x97\x98\x58\x0c\xb2\xed\x76\xb3\x8b\x98\x77\x99\x93\xcf\x31\x83\x9b\xf7\x6b\x96\x8f\x7d\xf7\xc7\xdb\x9b\xeb\x71\xe0\xfe\xfe\xfe\xa7\x8f\xe3\x90\xf7\xff\x46\x30\x43\xef\xc9\x13\x85\xc9\x3a\x9b\x33\x9c\x67\x36\xd8\xb0\x25\xa6\xde\xe3\x23\xcc\xd6\x69\x1a\xa9\x8f\xd9\x2a\xa7\xd0\xaf\x4d\xf1\x56\x24\x67\x39\x7b\x59\x21\x6f\x36\xc3\x19\x66\x15\x06\x73\x51\x09\x23\x66\xb2\x02\x07\xa2\x88\x20\xb6\x26\x99\xc5\x1b\xea\x78\x4f\x88\x7d\xca\x73\xf6\x9e\x1a\xb8\x42\x2e\x06\x1b\x39\xd3\xc6\xdb\x6d\x86\x9e\x2d\x6d\x2a\x50\x1c\xd8\xc8\x23\x28\x5e\x5c\x65\xec\x34\xb4\x91\xb7\xca\x29\x96\x6b\x02\x8e\xfe\xe5\x22\xd0\xb5\x92\x55\xcc\x96\xda\x3a\xc0\x86\xcb\x13\x41\xc5\xbd\x37\x9b\xe5\x49\x42\x11\xb3\xb5\xc5\xb9\x43\x50\xac\x09\xbd\xab\x06\x52\x46\x70\xf6\xa4\x0f\x74\x90\xcb\xc0\x98\x4b\xb5\x8b\xfa\x97\x38\x5d\xa3\xd7\x92\x1f\x7d\x35\xf2\xfc\x1f\x5d\x11\x0e\x20\x7e\x6e\x20\xae\xb6\xe0\xbc\x4e\x1c\x8c\x0b\x75\xf4\xb8\x36\x76\xf1\x80\xb3\x05\xca\x58\x93\x0b\xd6\xcf\x45\xe0\x97\x6c\xb0\x7e\x36\x18\x18\x37\xb4\x98\xb2\x98\x30\x83\xc6\x31\xb0\x61\xb2\xf3\xe6\xf1\x7f\xd1\x9c\xd9\xc3\x86\xd2\xc4\x8b\xc5\xcf\x75\x6d\x11\x5a\xcf\xdb\x2f\x31\x4a\x17\x37\x92\x4f\xdf\x45\xae\xdf\x9e\xfa\x6b\x63\xab\x8d\x73\x03\xf3\xdc\xbb\xda\x3e\x09\xd3\x40\xe5\x54\xb1\xe4\xd0\xc5\x6e\x4d\xdc\x6d\x90\xab\x86\xa0\x1b\x1c\x08\x98\x53\x03\x7d\x94\x2d\xcc\xd2\x52\xda\xc2\x07\x28\x89\x55\xba\xb1\x8b\x64\x2f\x12\x7e\x09\x79\x62\xf2\xe6\xfa\xe6\xfa\x62\xec\xbb\x25\xdc\x38\x70\x3f\xa1\x78\x21\xfe\x1b\xba\xdf\xc6\xd9\x1c\xa5\xe2\xe3\x94\xcf\xf9\x09\x51\x1a\x3f\xa1\x43\x3d\x55\x39\xe1\xab\xf8\xa9\x0a\xad\xf4\x52\x2d\x7e\x58\xdb\x47\x95\xd3\x4a\x0f\xc5\x34\x0f\xc5\x6a\x1e\x4a\xff\x72\x19\x30\xaf\x20\x26\x4f\xf4\xce\x60\xa6\x7b\x0c\x64\xd8\x61\x1f\xbf\x60\x83\x81\xc8\xed\xf1\xf8\xee\x74\x33\xf1\x75\xbc\xd4\x3a\x93\x82\x6b\x78\x0a\xe9\xa4\x2a\xd2\xc2\x0c\xdb\xf2\x6e\x5a\x68\x58\x13\x5a\xbc\x10\x9a\x54\x97\x96\xd8\xa3\x86\x96\xfb\x2e\x76\xb5\x35\x9b\x40\x0e\x35\xd4\x6a\x22\xca\x16\x26\x86\xf7\x1b\x09\x86\x9b\x5d\x84\xbd\xdb\xab\x3f\x2e\x6e\x2e\x67\xb7\x3f\xdc\x7c\xba\x83\x61\xd5\x70\x75\x7d\x07\x87\x11\xf6\x2e\xaf\x3e\x5e\xcc\xae\xbe\xbb\xb8\xbe\xbb\xba\xbc\xba\xf8\x34\xfb\x78\x71\xfd\xfd\xdd\x0f\xa2\xeb\x22\x9b\xe7\x0b\x9c\x3d\xc1\xcd\x2f\x77\x97\xe7\xb3\x0f\xbf\xdf\x5d\xdc\x8e\x03\xf7\x97\xbb\xcb\x60\x34\xbb\xbd\xfb\x74\x75\xfd\x3d\x3f\xfd\xb1\x87\xb9\x16\x42\xae\xa7\x42\x1f\xdf\x13\x12\xbf\xd8\x21\x88\xb0\x97\xa4\x79\x5c\xf4\x5d\xca\xff\xcb\x5e\x35\xc9\x7b\x5c\x27\x09\x22\xe5\xd0\xd1\xb0\x1a\x3a\x1a\x76\x0d\xc5\xf4\x23\x66\x2c\x45\x17\xd9\x02\xc7\x99\x98\xc1\x15\x30\x18\xc9\x09\xc5\xf7\xb9\xfc\xbc\x0f\x5c\xff\x01\x14\xd3\xef\xfd\x07\x08\x61\x10\x61\xef\x63\x9e\x3d\x99\x4c\x38\xcd\x9f\x21\xdb\xfa\xd2\x82\x97\xf8\x69\x09\xd1\xd6\xdf\xa9\x09\xde\x9c\xa0\x98\x35\x1d\x6e\x61\x13\x10\xfa\x27\x27\x08\x42\xff\x9d\x1a\xfd\xc7\xc5\xa7\x9b\x31\xe7\x47\x7e\x8b\xd1\x25\x94\x76\x60\xe6\x6a\xc5\xba\x39\x2a\x0f\x50\xf0\x34\x9d\x4e\x7d\xe0\x94\x4c\x7d\x33\x0c\xdf\x0e\xdf\x8e\xde\x84\x6f\x47\x06\x40\xf4\xd7\x3a\x4e\xeb\xb6\xa5\xb9\x21\xb1\x44\xc8\xf8\x9f\x93\x93\x6a\x99\x90\x89\xbf\x25\x1c\x67\x1e\x6a\xcc\xfb\xae\xcf\xa5\xff\x61\x8d\xd3\x05\x22\x35\x70\x9c\xd8\x47\xa5\x56\x06\x7e\x38\xdc\xa1\x94\xa2\x42\x4b\x77\x85\x33\xc4\xde\x87\x17\x86\x3e\x88\x9d\xf0\xe2\x34\xcd\xe7\x31\x43\x36\x02\x52\xd6\x74\x15\xcf\x11\x44\xf2\xe3\x33\xce\xe2\x14\x3f\x65\x30\x90\xdf\x5f\x58\xfc\x98\x22\xcd\x43\xcb\x86\x19\xce\x66\x6b\x8a\xa0\xda\x2e\x4c\xaf\x11\x65\x68\x01\x93\x38\xa5\x0a\x29\x17\xf6\x31\x13\x06\x5e\x8c\x93\x93\x29\xbc\x7f\x50\xdf\x68\xce\x72\x32\xcb\xd6\x9f\x67\x28\x45\x9f\x69\x31\x2e\xc9\xc9\x1c\xcd\x16\x28\x89\xd7\x29\xa3\x12\x75\x57\xc9\x40\x93\xb8\x18\xf9\x5d\x39\x50\xf7\x2d\x06\x20\x66\x06\x59\xc4\x2c\x96\xd2\x69\x2b\x82\xa5\x84\x68\x9e\x19\xd3\x4a\xe3\xbb\xe7\x7a\x8f\x2f\x0c\x51\x1b\x78\x74\xfd\x18\x0b\xe3\x28\x3a\xf4\x23\xa3\xd5\x24\xb5\x4e\x39\x63\x00\xba\x38\x10\xc4\xf7\xb1\x5f\xb2\x20\xed\xd1\xa3\x29\x9e\xa3\xaf\xc8\xc6\x8a\xa0\x55\xc3\x3a\x71\x62\xb3\x69\x4d\xa9\xd4\xa6\x94\x3a\xc6\x76\x5c\x53\x09\xfc\xff\x92\x91\x79\xbc\x8a\xe7\x98\xbd\xd8\x60\x50\xe9\xa6\x83\x80\x13\x9c\xb0\x41\x10\x3d\x2f\x71\xaa\xb8\x16\x3d\x13\xe2\x30\x07\x49\x03\xa0\xb0\x0d\x12\x69\x16\xa0\x58\x7e\x22\xf9\x73\x65\x0d\x05\x61\xdd\x14\x1c\x03\xd0\x80\x4a\x63\x5a\xc5\x0b\x9b\x74\x89\x20\x5e\xd4\x14\x30\xc9\x89\x2d\x2d\xd1\x8f\xd0\x84\x45\xc8\x71\xca\x68\xc5\x7b\xe6\x41\x93\x38\xbe\x06\xda\x4a\xf9\x21\x64\x06\x2f\xc7\xb7\x75\xbc\x86\x56\x61\x0d\x60\x20\xc2\x90\x3e\xb4\x60\xd4\x0b\x17\x8c\x6a\x78\xe1\x5e\xbc\xd3\xb0\x17\x8f\xc7\x4c\x1a\xde\x70\x2f\x9e\xee\x99\x0d\x78\xa3\x61\x0d\xef\xbc\x1f\x4f\x1d\x84\xdd\x88\x6a\xc0\x6b\x78\x6c\x9d\x1f\x46\xcc\x83\xf9\x14\x71\xbd\x69\x8f\xb9\x79\xd9\x01\x3f\x08\xc4\xa7\xb6\xdf\xbd\x48\xa6\xfd\x15\x50\x61\x0b\x8a\xef\x75\x2f\x96\x49\x72\x02\x6b\xd8\xc2\xe2\x32\xec\xc5\x32\x49\x4c\x60\x9d\xb7\xb0\xb8\xec\xba\xb1\x3a\xf7\xd4\xc4\x59\xb9\xbf\x7b\xf0\x0e\xe5\xae\xdc\xdb\x1e\xbc\x22\x4a\xad\xf9\x46\x1e\xc4\x72\xef\xd8\x3e\xa1\xb6\x5b\x74\x04\xb1\xa2\xa9\xb4\xa1\x3a\xa8\xd3\x9c\x71\x62\x7b\xa9\xd5\xb6\xfd\x95\xe4\x82\xd1\xeb\xe9\xd5\x36\xe0\x95\xf4\x4e\xc3\xd7\xd3\xab\x6d\x50\x3f\xbd\xa3\x22\x28\xb3\x31\xa8\xd1\x1d\x0d\x5f\x49\xb7\xad\x6a\xaf\x59\x69\xa1\x7b\xff\x80\xe6\x2b\x56\x6b\xa0\xf9\xea\x75\xca\x94\xe8\x1f\x92\x54\xf9\xd4\xeb\x28\xde\x32\xb2\x9e\x1b\x29\x6a\xe0\x99\x08\x30\x0f\x44\xce\x54\x34\x5a\x0f\x95\xd9\x11\xac\x87\x32\x1b\xb6\x24\xf9\xb3\xc5\x63\xed\x0b\x42\x72\x62\x1f\x5f\xa6\x31\x93\x91\x01\x1d\x5b\x54\xf0\x65\x7d\x5e\x53\x66\x3d\x22\x8b\x22\x82\xe3\x14\xff\x8d\x16\x16\xce\x52\x9c\x21\xef\xb8\x93\x7e\xce\xae\x1b\x2c\x54\x12\x2c\x82\xe5\x7d\xe4\x65\x00\x5d\x92\x8d\x39\x8c\x64\x26\xcb\x05\x43\x72\x95\xdd\x5c\x70\x19\xb5\x3d\x99\x8c\xc1\xef\xd9\x43\x5d\x18\x66\x88\xbc\xa1\x0c\xad\xb0\xd2\x18\xb0\xe9\x58\xf5\x78\xcb\x98\x4c\x6b\xf1\x1a\xdf\xf3\x93\xd3\x30\x0c\xc2\xf0\x6c\xf8\x26\xdc\x27\xa2\x79\x9c\x71\x59\x70\x1a\x96\x0c\x6c\xad\x47\xf4\x92\x67\x0b\x2b\xb4\x9e\xf0\x53\x2c\x82\x5e\x2e\x20\x19\x67\xa2\xc9\x24\x88\x64\xac\x68\x4e\x89\x08\x88\xa8\x47\x11\xfb\xb9\x08\x7e\xc9\x00\xf1\xa6\x32\x7e\x47\xcc\x66\xc5\x97\x2b\x3a\x95\x3c\x68\xa7\x8a\xb7\xec\x49\x3f\x51\xf4\xba\x80\xf1\x18\xd5\xb7\x68\xc0\x1c\x7d\x7c\xc7\x96\x69\x15\x95\x36\xd1\x52\x31\xa5\xac\xf5\x14\x4f\xe4\x78\x35\x1d\x81\xf7\x0f\x3b\x43\xce\xc7\xa2\xee\xc8\x56\x29\x17\x7a\x80\xfe\xae\x9e\x19\x32\xb2\x36\x25\x86\x07\xe8\x60\x59\x6b\x31\x19\x93\xce\xfc\x76\x7b\xf4\x2a\x03\x2b\x81\xad\x79\x9c\xa6\x68\x61\x3d\x63\xb6\xcc\xd7\xcc\xd2\x44\x78\x0c\x76\xf5\xc3\xca\x07\x91\x56\xb0\x2b\x38\x8f\xb4\x12\x5a\x4d\x5a\x83\x40\x48\x2b\x42\x53\xe8\xab\xa4\xbf\x92\x11\x17\xdf\x60\x00\x36\x85\x7a\x3a\xda\x60\xd9\x53\x3f\x98\xeb\xd3\x8f\xa0\xff\x8e\x0d\xea\x6d\x63\x5f\xea\x3a\x85\x61\xd4\x98\x3b\x68\x09\x5f\x72\x9d\x41\x9b\x38\x14\x7c\x53\xaf\x59\x35\x66\x67\x72\x6c\x0e\x7d\xf1\x37\x86\x95\xb1\x47\x6c\xcc\x99\x56\xba\xa0\x65\xf9\x5e\x8a\xb2\x27\xb6\x94\xda\xc1\x67\x25\xa6\xc4\x4a\x9f\x71\x8f\x1e\xb8\x56\x66\x10\xea\x45\x4e\xc9\x41\x02\xaa\x8c\x6a\x09\x1b\xcc\x2e\x27\x59\xb4\x74\x1a\xad\x95\x92\xd4\x80\x62\x67\x09\x8e\x4c\x04\x9c\x25\x00\x9b\x79\x9e\x31\x9c\xad\x91\xc5\x76\xbb\x1c\x36\x99\x7b\x24\x28\xfe\x73\xb7\xc3\x89\x9d\xab\xbd\x91\xc5\x13\xd3\xba\xa2\xde\xec\xc7\xcd\x07\x0c\xc8\x6a\x4d\x4d\x66\xab\x35\x5d\xd6\xad\x1e\x74\x02\x35\x08\xba\x0d\x67\x01\x76\xa6\xda\x4c\xe1\xbf\x3b\xca\x29\x38\xc3\xb4\x79\x27\xc2\x9d\xb2\xdc\x41\x52\x94\x89\x84\xf3\xaa\x25\xf3\xae\xee\x9a\x9c\xae\x02\xa7\xf0\x3a\x44\x69\xc6\x11\xec\x1c\xb6\xc7\x72\x13\x9c\x22\x0b\x2f\x50\xc6\x70\x82\x11\x29\x8f\x68\x89\x6b\x1d\x77\xd3\xdf\x15\x3a\x44\x3b\x89\x0f\x82\x88\x72\x03\xa4\xa5\x01\x56\xe9\x16\xf1\xe6\xcb\x98\x7c\x9b\x2f\xd0\x7b\x66\x53\x00\x76\xbb\x43\xc4\x01\xa2\x46\x7c\xc4\xaa\x4d\xd5\x4f\x9b\x4a\x3d\x3a\x5c\x21\x41\x7f\xad\x31\x41\x32\x6c\x6a\xec\x92\x2c\x3e\x1b\x35\x51\x6e\x1d\x1e\x34\x94\xfe\x34\xb4\x31\x88\xea\xb5\x93\xca\x1e\x88\x83\xc0\x11\xf4\xf9\x86\x1d\xd1\xfd\x1b\x82\xd2\x85\x75\xec\x20\xe7\x58\x8b\x97\x58\x77\x68\xc2\xfd\xcf\xaf\xa2\xfa\x57\x8f\xfb\x88\xe1\xa0\x92\x06\xd2\x2c\x15\xea\x9a\x58\x3b\x46\xd9\x37\x45\x90\x28\xfa\x88\x68\xe8\x3c\x5a\x9a\x4c\x34\xb6\xbc\xb0\xb5\x26\x79\xa0\xdf\x2f\xed\x39\xc0\x64\xed\xfa\x56\xdc\xe8\xb6\x62\x52\x0b\x67\x94\xc5\xd9\x1c\xe5\x89\x56\x3d\x2f\x83\x23\xbd\xa0\x7b\xff\xa0\x6e\x18\x7c\x55\x08\xc3\x13\xa6\x4c\x49\x99\x67\xb1\x99\xba\x96\x62\xc7\x11\x56\x47\x27\x67\x67\xe1\xdb\xd1\x76\x4b\xa7\xf0\x6c\x74\x1a\xfa\x60\x43\x20\xad\xf0\x33\xc3\x34\x02\x6d\x3a\x99\x04\x3e\x70\x32\xc7\x1e\x9d\x9d\x9d\x8e\x06\xb6\x40\x11\x8d\x03\x09\xc3\xdd\x21\x99\x04\xe1\x39\xd8\x20\xe9\xbf\x88\xf2\x6c\xa2\x23\xf4\x87\x5a\xcf\x74\x3a\x3a\x39\x0d\xb6\xc1\xdb\x50\x1f\x23\xa0\xf5\x41\x41\x78\x12\x9c\x6d\xc3\x70\xa8\x46\x69\x3d\xe7\x27\x6f\xb6\xe1\xd0\x77\xe5\xa8\xd1\xe9\x96\x53\xde\xe9\xf8\xcd\xb6\xb2\x61\xb7\xab\xe5\xd5\x45\xbc\xa5\x29\xa3\x1d\xb8\x48\x89\xd4\x0d\xf6\x19\xe9\x00\x16\x63\x41\x19\x12\x61\xe8\xbb\xb9\x76\x3a\xba\x71\x69\x5a\x2a\x6c\x8c\xf0\xa4\x98\x16\x71\x21\x6f\xe2\xfb\xdc\x71\x1e\x20\xba\xc7\x0f\x3b\x5d\xa9\x4a\xe5\xec\xd7\x2b\xc3\x7d\x8a\x42\xa9\x5d\x9d\x94\x77\x20\x1d\xc1\xb8\xe4\x92\xb3\x38\x2b\xae\x51\x8b\x12\xf0\x0c\xfa\xf5\x89\x65\xc0\x6c\xba\xe9\x90\x37\x17\x5a\x89\xb5\x71\x2f\xc4\x40\x83\x0d\x6d\x45\x82\x7e\x67\xb6\x21\x98\xeb\x9c\x5b\x70\xdb\x35\xbd\x5c\x4d\x27\x82\xb6\xcb\x86\x70\xbd\x14\x06\xeb\x04\x28\x9c\x6e\xff\x0a\xd4\xe6\x77\xa2\x14\x0f\x1f\x3a\xaf\x91\xb4\x9b\x5f\x30\x99\x84\xc3\xe9\x34\x1c\xf6\xa2\x89\xc1\x9d\x70\x92\xab\x7b\xf6\xb0\x8f\xa3\x46\x35\xd1\xc4\x92\xa8\x22\x4e\x26\xc1\x68\x3a\x0d\x46\x7b\x79\xea\x01\x2c\x99\xda\xd6\x3e\x9d\xe0\x61\x32\x39\xdf\xc7\x68\xa3\x20\x78\x30\x6e\xa3\x2d\x7c\xe0\x2b\x69\x34\x9e\x3e\x70\x91\xef\x5d\x5a\x0f\x0b\xda\x03\x02\x30\x9d\x4e\x9b\xb6\xd5\x5a\x4d\xa3\x1c\x59\x33\x33\x79\xbb\xd9\x44\x75\x9b\x2d\xce\xb0\xc7\xe8\x0a\x96\x0f\xa7\x23\x17\x58\x23\x54\x34\xed\xa5\x64\xaa\xd8\xaa\xab\xe6\x7b\x5f\xd5\x24\xf4\xb5\x44\xa5\x33\x53\x97\xda\xf7\x7e\xbf\xa2\x9a\x4a\xb8\x05\x81\xe6\x1d\xf6\x3b\x7f\x1c\x98\x68\x76\x8e\x0f\xc6\x06\x1e\x9d\x61\x93\xcb\xd1\xb0\x8f\x4b\xd3\x5d\x4e\xf5\x92\xa5\x50\x50\x88\xfa\x01\x9a\x46\xfd\x7a\x84\x76\xa5\xb8\x8d\x10\x35\xcd\x04\xa2\xe9\xb4\xdb\x00\x4b\xce\xfe\x2b\xc0\xed\x52\xf3\xa1\xb8\x51\xd3\xb2\x79\x6b\x30\x8a\x9a\xb6\xcd\x9b\x7b\xac\xbb\x5c\xde\xbf\x80\x8d\x76\x1d\xdc\x10\xba\xf2\x68\x26\x7f\x36\xd4\x95\x9c\xa1\x8b\xc4\xb3\x83\x6e\x6b\x2d\x17\xdb\x43\xa6\x30\xfb\x36\x9d\xca\x21\x1c\x46\xc8\x54\x5e\xe7\x86\x5b\x59\x7d\x21\xd4\xda\xfa\x2a\xd7\x71\x08\x7e\x6b\x25\xba\xbd\xf6\xe2\x1b\x3d\x87\x59\xae\xbd\xce\xa3\x9b\xcb\x27\xa4\xd2\xa9\xab\x32\xaf\x35\x15\xbc\x6a\x31\xc4\xa4\x1e\x9a\x38\x87\xe5\xe0\x7b\x72\xb9\x8a\x3b\x0b\x53\x8b\xe5\xb9\x45\x97\x39\x61\x16\xcb\xad\x79\x9e\xb1\x18\x67\x56\x9c\x69\xd9\x77\x51\x5f\x65\xf0\xf8\xb8\x51\x1a\xec\x62\x41\x55\x0c\x1d\x28\x93\x22\x2f\x21\xf9\xe7\x6f\x55\xee\x51\x3b\xce\xd4\x85\x76\xc7\x0a\x11\x00\xbb\x5a\x3d\xc3\x24\xd7\xe2\x39\x9b\x39\x5d\x1e\x74\x1e\x38\xaa\x98\x55\x25\xc4\x18\xbc\x6b\xb6\x38\x48\xbc\x47\xed\xa4\x2c\xde\xc7\xb5\x1e\x9f\xa9\xc7\x8a\xc8\x69\xd0\xe6\x69\xab\xf7\xf8\x28\xce\x97\xe8\x80\x75\xd1\x66\x46\x29\xe0\x1d\xc3\x79\x26\x0b\x00\xe6\x76\xca\xb7\x4d\x26\x80\x7e\xc4\xb4\x22\xda\xd5\xf5\x9d\xa8\xc7\x43\x08\xab\x47\x69\x5e\xf5\x26\xcd\x18\xdb\x56\x2f\x5c\x5c\xe6\x10\xb0\x93\x89\x6a\x36\x21\x52\xe2\xb9\x5e\x3e\xd4\xe2\x58\x27\x53\x59\x6a\x3c\xe1\xa9\xe1\x26\x87\x71\x95\x99\x26\x7d\xc3\x79\x8e\xb8\xc9\xa1\x1d\x9f\x9c\x06\x60\x32\x19\x6d\x93\x93\xd1\x69\x35\x77\xd9\x3b\x77\xe8\xab\xb9\xc1\x19\x8f\x5a\xc3\xad\xcd\x67\x0b\x98\x65\x0d\x66\xdd\x01\x23\x26\xbf\xe1\x73\xcf\xcb\xb9\x1c\x66\x59\xc0\xac\x39\x8c\xac\x18\x16\x59\x2e\x35\xab\x7d\xae\x52\xdd\x7c\x00\xc5\xc0\xa8\x63\x9c\x9d\x4f\xa7\x3c\x23\x17\x79\xb8\x6b\xe7\x27\x76\x20\xb3\xf1\x00\x38\x2a\x21\xdf\xd5\x2e\x25\xcc\xca\x83\xb3\x05\x26\xcd\x3b\x82\x62\x43\x9b\x9a\xc9\xba\xdd\xd6\x6c\xf6\xa5\x59\xc6\xe9\xc3\xa9\x19\xf0\x5e\xd0\x59\x8a\xb2\x43\xe2\xe8\x36\x9d\x3e\x86\x97\x31\x9d\x61\x83\x93\x55\x15\x99\x7f\x43\x75\xf2\x10\xf7\x29\x78\xd5\x2a\x36\xa8\x28\x6b\x1f\xea\x3b\x0b\x69\xca\xe7\x75\xa5\x27\x25\xeb\xee\xb8\xf1\x9f\x94\x1c\xe6\x79\x46\x99\x45\xa0\xbc\x50\xf1\x12\x82\xd0\xdf\xc8\x2e\x9e\xb7\x83\xa8\x00\xb2\xa8\x4d\xdd\x0c\x1e\x1f\xbb\x9b\x44\x74\x8d\x73\x48\xc4\xeb\x77\x57\xfe\xaa\x60\x1c\xc3\x70\x07\x37\x3b\x51\xa5\xa7\xcc\x4a\xd4\x2b\x49\x55\x19\xb1\x03\x3f\x1c\x02\x45\x6e\x09\x7f\xbc\xbd\xb9\xf6\xa4\x8b\xc4\xc9\x8b\x4d\x8b\x9e\x35\x4c\x6a\x15\x39\x7b\x59\xf4\xac\x9a\x3d\x19\xe8\xf9\xa9\x81\x9d\x00\xe3\x8f\x02\xec\xc4\x5d\xb7\x7a\x7e\x8e\xd9\xd2\x4e\xdc\x55\xab\xe3\xee\x65\xc5\x67\xe4\xad\x0e\xf9\xbe\xdf\x4e\xdc\xb8\x60\x6f\x01\xbb\xde\xf1\x73\x56\xcc\xaf\xad\xeb\x3d\xda\x93\x6a\x3b\x29\xde\x4c\x57\xbf\xc2\x69\x8f\xb4\x13\x77\x51\x90\x7f\x84\xa6\xd7\xd1\x9c\x40\xa2\xae\x0d\xec\x47\x10\xfd\x7a\xfe\x5b\x4e\xfe\x44\x24\xf4\x28\xca\x16\x76\x52\x7f\x9f\x68\x03\xb0\x2b\xb7\x5b\x69\x0e\xb5\x99\x7b\x7c\xcc\x35\x45\xde\x30\x6d\xd2\xfc\x69\x9c\xb9\x52\x3b\xc6\xc4\x15\xd1\xd5\x98\xee\x22\xf4\x7f\x2b\x1e\x86\xa8\xa7\x07\x56\x1e\xfd\xcf\x7f\x02\x00\x00\xff\xff\xab\xf1\x1f\xdd\x2d\x35\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/std.js"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
